@page "/scores"
@inject BlazorGame.Client.Services.IPlayerService PlayerService

<div class="pixel-container">
    <div class="pixel-header">
        <h1>Tableau des Scores</h1>
        <p>Classement des meilleurs aventuriers du royaume</p>
    </div>

    <div class="scoreboard-section">
        <div class="stats-summary">
            <div class="stat-card">
                <div class="stat-number">@totalPlayers</div>
                <div class="stat-label">Aventuriers</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@totalScore.ToString("N0")</div>
                <div class="stat-label">Points Total</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@averageScore.ToString("F1")</div>
                <div class="stat-label">Moyenne</div>
            </div>
        </div>

        <div class="top-players">
            <h3>Top 10 des Héros</h3>
            
            @if (topPlayers.Any())
            {
                <table class="pixel-table">
                    <thead>
                        <tr>
                            <th>Rang</th>
                            <th>Aventurier</th>
                            <th>Type</th>
                            <th>Vie</th>
                            <th>Score</th>
                            <th>Objets</th>
                            <th>Titre</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < topPlayers.Count; i++)
                        {
                            var player = topPlayers[i];
                            var rank = i + 1;
                            <tr class="@GetRankClass(rank)">
                                <td>
                                    <span class="rank-badge">
                                        @if (rank == 1) { <text>#1</text> }
                                        else if (rank == 2) { <text>#2</text> }
                                        else if (rank == 3) { <text>#3</text> }
                                        else { <text>@rank</text> }
                                    </span>
                                </td>
                                <td class="player-name">@player.Username</td>
                                <td>@(player.IsAdmin ? "Admin" : "Joueur")</td>
                                <td>
                                    <div class="mini-health-bar">
                                        <div class="mini-health-fill" style="width: @player.Health%"></div>
                                        <span class="health-text">@player.Health</span>
                                    </div>
                                </td>
                                <td class="score">@player.TotalScore.ToString("N0")</td>
                                <td>@player.Inventory.Count</td>
                                <td class="title">@GetPlayerTitle(player.TotalScore)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="no-players">
                    <h4>Aucun aventurier enregistré</h4>
                    <p>Soyez le premier à vous lancer dans l'aventure !</p>
                </div>
            }
        </div>

        @if (recentActivity.Any())
        {
            <div class="recent-activity">
                <h3>Activité Récente</h3>
                <div class="activity-list">
                    @foreach (var activity in recentActivity.Take(5))
                    {
                        <div class="activity-item">
                            <span class="activity-icon">@GetActivityIcon(activity)</span>
                            <span class="activity-text">@activity</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="navigation">
        <a class="pixel-btn" href="/">Retour à l'accueil</a>
        <a class="pixel-btn primary" href="/adventure">Partir à l'aventure</a>
        <button class="pixel-btn gold">Actualiser</button>
    </div>
</div>


@code {
    private List<SharedModels.Models.Player> topPlayers = new();
    private int totalPlayers = 0;
    private int totalScore = 0;
    private double averageScore = 0;
    private List<string> recentActivity = new();

    protected override void OnInitialized()
    {
        // Données statiques pour les tests UI
        topPlayers = new List<SharedModels.Models.Player>
        {
            new SharedModels.Models.Player { Username = "Héros Légendaire", IsAdmin = false, Health = 100, TotalScore = 1500, Inventory = new List<SharedModels.Models.Item>() },
            new SharedModels.Models.Player { Username = "Maître Aventurier", IsAdmin = false, Health = 95, TotalScore = 1200, Inventory = new List<SharedModels.Models.Item>() },
            new SharedModels.Models.Player { Username = "Guerrier Brave", IsAdmin = false, Health = 80, TotalScore = 800, Inventory = new List<SharedModels.Models.Item>() }
        };
        
        totalPlayers = 15;
        totalScore = 5000;
        averageScore = 333.3;
        
        recentActivity = new List<string>
        {
            "Héros Légendaire a atteint 1500 points !",
            "Un joueur a vaincu un Dragon Ancien !",
            "Quelqu'un a trouvé une Épée légendaire !",
            "Un trésor caché a été découvert !",
            "L'aventure continue dans les donjons mystérieux..."
        };
    }

    string GetRankClass(int rank)
    {
        return rank switch
        {
            1 => "gold-rank",
            2 => "silver-rank",
            3 => "bronze-rank",
            _ => ""
        };
    }

    string GetPlayerTitle(int score)
    {
        return score switch
        {
            >= 1000 => "Tueur de Dragons",
            >= 500 => "Maître Guerrier",
            >= 250 => "Chevalier Vaillant",
            >= 100 => "Aventurier Confirmé",
            >= 50 => "Explorateur",
            >= 10 => "Novice",
            _ => "Débutant"
        };
    }

    string GetActivityIcon(string activity)
    {
        if (activity.Contains("score")) return "*";
        if (activity.Contains("vaincu")) return "+";
        if (activity.Contains("trouvé")) return "#";
        if (activity.Contains("trésor")) return "@";
        return "-";
    }

}

<style>
    .scoreboard-section {
        margin-bottom: 30px;
    }

    .stats-summary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: var(--pixel-gold);
        color: var(--pixel-dark);
        padding: 20px;
        border: 3px solid var(--pixel-dark);
        text-align: center;
        box-shadow: 3px 3px 0px var(--shadow-color);
    }

    .stat-number {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .stat-label {
        font-size: 10px;
    }

    .top-players {
        background: var(--pixel-light);
        border: 3px solid var(--pixel-dark);
        padding: 20px;
        margin-bottom: 30px;
    }

    .gold-rank {
        background: linear-gradient(45deg, #FFD700, #FFA500) !important;
        color: var(--pixel-dark) !important;
        font-weight: bold;
    }

    .silver-rank {
        background: linear-gradient(45deg, #C0C0C0, #A8A8A8) !important;
        color: var(--pixel-dark) !important;
        font-weight: bold;
    }

    .bronze-rank {
        background: linear-gradient(45deg, #CD7F32, #B87333) !important;
        color: white !important;
        font-weight: bold;
    }

    .rank-badge {
        font-size: 16px;
        display: inline-block;
        padding: 5px;
    }

    .player-name {
        font-weight: bold;
    }

    .score {
        font-weight: bold;
        color: var(--pixel-gold);
    }

    .title {
        font-size: 10px;
        color: var(--pixel-blue);
    }

    .mini-health-bar {
        background: #333;
        border: 1px solid var(--pixel-dark);
        height: 15px;
        width: 50px;
        position: relative;
        display: inline-block;
    }

    .mini-health-fill {
        background: linear-gradient(90deg, var(--pixel-green), #45a049);
        height: 100%;
        transition: width 0.3s ease;
    }

    .health-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 6px;
        text-shadow: 1px 1px 0px black;
    }

    .no-players {
        text-align: center;
        padding: 40px;
        color: #666;
    }

    .recent-activity {
        background: var(--pixel-brown);
        color: var(--pixel-light);
        border: 3px solid var(--pixel-dark);
        padding: 20px;
    }

    .activity-list {
        margin-top: 15px;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 10px;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-icon {
        font-size: 14px;
        width: 20px;
        text-align: center;
    }

    .navigation {
        text-align: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 3px solid var(--pixel-dark);
    }

    @@media (max-width: 768px) {
        .stats-summary {
            grid-template-columns: 1fr;
        }
        
        .pixel-table {
            font-size: 8px;
        }
        
        .stat-number {
            font-size: 18px;
        }
    }
</style>
